package com.cibertec.assessment.service.imp;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cibertec.assessment.beans.PolygonBean;
import com.cibertec.assessment.model.Square;
import com.cibertec.assessment.repo.SquareRepo;
import com.cibertec.assessment.service.PolygonService;
import com.cibertec.assessment.service.SquareService;

@Service
public class SquareServiceImpl implements SquareService{

	@Autowired 
	SquareRepo squareRepo;
	
	@Autowired
	PolygonService polygonService;
	
	//Al momento de crear se debe validar si 
	//alguno de parte del cuadrado se encuentra dentro de algun
	//poligono y de ser asi se debe capturar el id de los poligonos y 
	//guardar como un string pero con formato de array
	//Ejemplo polygons = "["1","2"]"
	//Se guardan los ids correspondites
	//usar los metodos ya existentes para listar polygonos
	@Override
	public Square create(Square s) {
		
		List<PolygonBean> polygonBeans = polygonService.list();
		
		Square square = s;
		String xcuadrado = square.getXPoints();
		String ycuadrado = square.getYPoints();
		
		xcuadrado = xcuadrado.substring(1, xcuadrado.length() - 1);
		ycuadrado = ycuadrado.substring(1, ycuadrado.length() - 1);
		
		String[] xPoints = xcuadrado.split(",");
		String[] yPoints = ycuadrado.split(",");
		
		Integer[] xc = new Integer[xPoints.length];
		Integer[] yc = new Integer[yPoints.length];
		
		for (int i = 0; i < xPoints.length; i++) {
			xc[i] = Integer.parseInt(xPoints[i].trim()); // trim() elimina espacios en blanco
			System.out.println("xc"+xc[i]);
	    }
		
		
		
		for(int i = 0 ; i < polygonBeans.size(); i++) {
			
			PolygonBean poly = polygonBeans.get(i);
			Integer[] xlist = poly.getXPoints();
			Integer[] ylist = poly.getYPoints();
			
			for(int j = 0 ; j < xlist.length ; j++) {
				
				int x = xlist[j];
				int y = ylist[j];
				
			}
			
		}

		return squareRepo.save(s);
	}

	@Override
	public List<Square> list() {
		return null;
	}
	

}
